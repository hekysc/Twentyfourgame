"use strict";class t{constructor(t,n){if(0===n)throw new Error("denominator 0");this.n=t,this.d=n,this.normSelf()}static fromInt(n){return new t(n,1)}normSelf(){let t=this.n,n=this.d;n<0&&(t=-t,n=-n);const e=function(t,n){for(t=Math.abs(t),n=Math.abs(n);0!==n;){const e=t%n;t=n,n=e}return 0===t?1:Math.abs(t)}(Math.abs(t),Math.abs(n));this.n=t/e,this.d=n/e}plus(n){return new t(this.n*n.d+n.n*this.d,this.d*n.d)}minus(n){return new t(this.n*n.d-n.n*this.d,this.d*n.d)}times(n){return new t(this.n*n.n,this.d*n.d)}div(n){if(0===n.n)throw new Error("divide by zero");return new t(this.n*n.d,this.d*n.n)}equalsInt(t){return this.n===t*this.d}toString(){return 1===this.d?String(this.n):`${this.n}/${this.d}`}}function n(t){if(1===t.length)return t[0].v.equalsInt(24)?t[0]:null;for(let e=0;e<t.length;e++)for(let r=0;r<t.length;r++){if(e===r)continue;const s=[];for(let n=0;n<t.length;n++)n!==e&&n!==r&&s.push(t[n]);const i=t[e],l=t[r];{const t={v:i.v.plus(l.v),expr:`(${i.expr}+${l.expr})`},e=n(s.concat([t]));if(e)return e}{const t={v:i.v.minus(l.v),expr:`(${i.expr}-${l.expr})`},e=n(s.concat([t]));if(e)return e}{const t={v:i.v.times(l.v),expr:`(${i.expr}×${l.expr})`},e=n(s.concat([t]));if(e)return e}if(0!==l.v.n){const t={v:i.v.div(l.v),expr:`(${i.expr}÷${l.expr})`},e=n(s.concat([t]));if(e)return e}}return null}exports.evaluateExprToFraction=function(n){const e=[];let r=0;for(;r<n.length;){const t=n[r];if(/\s/.test(t))r++;else if("()+-×÷".includes(t))e.push({t:t}),r++;else{if(!/\d/.test(t))return null;{let t=r+1;for(;t<n.length&&/\d/.test(n[t]);)t++;e.push({t:n.slice(r,t)}),r=t}}}const s=t=>"+"===t||"-"===t?1:"×"===t||"÷"===t?2:0,i=[],l=[];for(const t of e)if(/^\d/.test(t.t))i.push(t);else if("("===t.t)l.push(t);else if(")"===t.t){for(;l.length&&"("!==l[l.length-1].t;)i.push(l.pop());if(!l.length||"("!==l[l.length-1].t)return null;l.pop()}else{if(!"+-×÷".includes(t.t))return null;for(;l.length;){const n=l[l.length-1].t;if(!("+-×÷".includes(n)&&s(n)>=s(t.t)))break;i.push(l.pop())}l.push(t)}for(;l.length;){const t=l.pop();if("("===t.t)return null;i.push(t)}const o=[];for(const u of i)if(/^\d/.test(u.t))o.push(t.fromInt(parseInt(u.t)));else{if(o.length<2)return null;const t=o.pop(),n=o.pop();let e;if("+"===u.t)e=n.plus(t);else if("-"===u.t)e=n.minus(t);else if("×"===u.t)e=n.times(t);else{if("÷"!==u.t)return null;if(0===t.n)return null;e=n.div(t)}o.push(e)}return 1===o.length?o[0]:null},exports.solve24=function(e){if(!e||4!==e.length)throw new Error("need 4 numbers");const r=n(e.map((n=>({v:t.fromInt(n),expr:String(n)}))));return r?r.expr:null};
